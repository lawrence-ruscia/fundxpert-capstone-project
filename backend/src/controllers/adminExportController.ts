import type { Request, Response } from 'express';
import { Parser as Json2CsvParser } from 'json2csv';
import * as ExcelJS from 'exceljs';
import { getAllUsers } from '../services/adminService.js';
import { SHEET_PASSWORD } from '../config/security.config.js';
import type { User } from '../types/user.js';
/**
 * GET /admin/users/export/excel
 * Exports a comprehensive user audit report in Excel format for system administrators
 */
export async function exportUsersExcelController(req: Request, res: Response) {
  try {
    const { startDate, endDate } = req.query as {
      startDate?: string;
      endDate?: string;
    };

    // Fetch users based on filters
    const users = await getAllUsers({
      startDate,
      endDate,
    });

    if (users.length === 0) {
      return res.status(404).json({
        error: 'No users found for the specified criteria',
      });
    }

    // Calculate security statistics
    const securityStats = {
      totalUsers: users.length,
      lockedAccounts: users.filter(u => u.locked_until).length,
      tempPasswordUsers: users.filter(u => u.temp_password).length,
      expiredPasswords: users.filter(u => u.password_expired).length,
      twofaEnabled: users.filter(u => u.is_twofa_enabled).length,
      highFailedAttempts: users.filter(u => u.failed_attempts >= 3).length,
      roleBreakdown: {
        admin: users.filter(u => u.role === 'Admin').length,
        hr: users.filter(u => u.role === 'HR').length,
        employee: users.filter(u => u.role === 'Employee').length,
      },
    };

    const workbook = new ExcelJS.Workbook();
    workbook.creator = 'FundXpert System';
    workbook.lastModifiedBy = 'System Administrator';
    workbook.created = new Date();
    workbook.modified = new Date();
    if ('subject' in workbook.properties)
      workbook.properties.subject = 'User Audit Report - System Administration';

    // ========== COVER SHEET ==========
    const cover = workbook.addWorksheet('Report Information');

    cover.addRow(['SYSTEM USER AUDIT REPORT']);
    cover.addRow(['']);
    cover.addRow([
      'DOCUMENT CLASSIFICATION: CONFIDENTIAL - SYSTEM ADMINISTRATOR ACCESS ONLY',
    ]);
    cover.addRow(['']);
    cover.addRow(['REPORT GENERATION']);
    cover.addRow(['System:', 'FundXpert']);
    cover.addRow(['Generated By:', req.user?.name || 'System Administrator']);
    cover.addRow(['User ID:', req.user?.id || 'SYS-ADMIN']);
    cover.addRow(['Report Date:', new Date().toLocaleString()]);
    cover.addRow(['Report Type:', 'Comprehensive User Audit']);
    cover.addRow(['Report ID:', generateReportId()]);
    cover.addRow(['']);

    cover.addRow(['REPORT SCOPE']);
    cover.addRow(['Total Users:', users.length]);

    // Date range
    if (startDate && endDate) {
      cover.addRow([
        'Registration Period:',
        `${new Date(startDate).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        })} - ${new Date(endDate).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        })}`,
      ]);
    } else if (startDate) {
      cover.addRow([
        'Registration Period:',
        `From ${new Date(startDate).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        })}`,
      ]);
    } else if (endDate) {
      cover.addRow([
        'Registration Period:',
        `Until ${new Date(endDate).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        })}`,
      ]);
    } else {
      cover.addRow(['Registration Period:', 'All Time']);
    }

    cover.addRow(['']);
    cover.addRow(['COMPLIANCE FRAMEWORK']);
    cover.addRow(['Standard:', 'ISO 27001']);
    cover.addRow(['Export Timestamp (UTC):', new Date().toISOString()]);
    cover.addRow(['']);

    cover.addRow(['LEGAL NOTICE']);
    cover.addRow([
      '',
      'This report contains confidential user information and security data.',
    ]);
    cover.addRow([
      '',
      'Unauthorized access, disclosure, or distribution is strictly prohibited.',
    ]);
    cover.addRow([
      '',
      'All access to this document is logged and monitored for compliance purposes.',
    ]);

    // Style cover sheet
    cover.getRow(1).font = { bold: true, size: 16 };
    cover.getRow(3).font = {
      bold: true,
      size: 11,
      color: { argb: 'FFDC2626' },
    };
    cover.getRow(5).font = { bold: true, size: 11 };
    cover.getRow(13).font = { bold: true, size: 11 };
    cover.getRow(20).font = { bold: true, size: 11 };
    cover.getRow(24).font = { bold: true, size: 11 };

    cover.columns = [{ width: 30 }, { width: 60 }];

    // ========== SECURITY OVERVIEW SHEET ==========
    const securitySheet = workbook.addWorksheet('Security Overview');

    securitySheet.addRow(['SECURITY OVERVIEW']);
    securitySheet.addRow(['']);
    securitySheet.addRow(['Total User Accounts', securityStats.totalUsers]);
    securitySheet.addRow(['Locked Accounts', securityStats.lockedAccounts]);
    securitySheet.addRow([
      'Temporary Password Users',
      securityStats.tempPasswordUsers,
    ]);
    securitySheet.addRow(['Expired Passwords', securityStats.expiredPasswords]);
    securitySheet.addRow(['2FA Enabled Users', securityStats.twofaEnabled]);
    securitySheet.addRow([
      'High Failed Attempts (≥3)',
      securityStats.highFailedAttempts,
    ]);
    securitySheet.addRow(['']);

    securitySheet.addRow(['ROLE DISTRIBUTION']);
    securitySheet.addRow(['']);
    securitySheet.addRow(['Administrators', securityStats.roleBreakdown.admin]);
    securitySheet.addRow(['HR Personnel', securityStats.roleBreakdown.hr]);
    securitySheet.addRow(['Employees', securityStats.roleBreakdown.employee]);
    securitySheet.addRow(['']);

    securitySheet.addRow(['COMPLIANCE METRICS']);
    securitySheet.addRow(['']);
    const complianceMetrics = {
      twofaCompliance: (
        (securityStats.twofaEnabled / securityStats.totalUsers) *
        100
      ).toFixed(1),
      noTempPassword: (
        ((securityStats.totalUsers - securityStats.tempPasswordUsers) /
          securityStats.totalUsers) *
        100
      ).toFixed(1),
      activeAccounts: (
        ((securityStats.totalUsers - securityStats.lockedAccounts) /
          securityStats.totalUsers) *
        100
      ).toFixed(1),
    };
    securitySheet.addRow([
      '2FA Adoption Rate',
      `${complianceMetrics.twofaCompliance}%`,
    ]);
    securitySheet.addRow([
      'Permanent Password Rate',
      `${complianceMetrics.noTempPassword}%`,
    ]);
    securitySheet.addRow([
      'Active Account Rate',
      `${complianceMetrics.activeAccounts}%`,
    ]);

    // Style security overview
    securitySheet.getRow(1).font = { bold: true, size: 14 };
    securitySheet.getRow(10).font = { bold: true, size: 14 };
    securitySheet.getRow(16).font = { bold: true, size: 14 };
    securitySheet.columns = [{ width: 30 }, { width: 20 }];

    // Highlight critical metrics in red
    const lockedRow = securitySheet.getRow(4);
    if (securityStats.lockedAccounts > 0) {
      lockedRow.getCell(2).font = { color: { argb: 'FFDC2626' }, bold: true };
    }

    const tempPassRow = securitySheet.getRow(5);
    if (securityStats.tempPasswordUsers > 0) {
      tempPassRow.getCell(2).font = {
        color: { argb: 'FFEA580C' },
        bold: true,
      };
    }

    const failedRow = securitySheet.getRow(8);
    if (securityStats.highFailedAttempts > 0) {
      failedRow.getCell(2).font = { color: { argb: 'FFDC2626' }, bold: true };
    }

    // ========== MAIN USER AUDIT SHEET ==========
    const sheet = workbook.addWorksheet('User Audit Data');

    // Column configuration
    sheet.columns = [
      { header: 'Employee ID', key: 'employee_id', width: 15 },
      { header: 'Full Name', key: 'name', width: 25 },
      { header: 'Email Address', key: 'email', width: 30 },
      { header: 'Role', key: 'role', width: 12 },
      { header: 'Department', key: 'department', width: 25 },
      { header: 'Position', key: 'position', width: 25 },
      { header: 'Account Status', key: 'account_status', width: 18 },
      { header: 'Failed Attempts', key: 'failed_attempts', width: 16 },
      { header: 'Locked Until', key: 'locked_until', width: 20 },
      { header: 'Password Status', key: 'password_status', width: 35 },
      { header: 'Temp Password', key: 'temp_password', width: 25 },
      { header: '2FA Enabled', key: 'is_twofa_enabled', width: 15 },
      {
        header: 'Last Password Change',
        key: 'password_last_change',
        width: 20,
      },
      { header: 'Account Created', key: 'created_at', width: 18 },
      { header: 'Days Since Creation', key: 'days_since_creation', width: 18 },
    ];

    // Freeze header row
    sheet.views = [{ state: 'frozen', ySplit: 1 }];

    // Style header row
    const headerRow = sheet.getRow(1);
    headerRow.font = { bold: true, color: { argb: 'FFFFFFFF' } };
    headerRow.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FF1f2937' },
    };
    headerRow.alignment = { vertical: 'middle', horizontal: 'center' };

    // Add user data
    users.forEach((user, index) => {
      const accountStatus = getAccountStatus(user);
      const passwordStatus = getPasswordStatus(user);
      const daysSinceCreation = Math.floor(
        (Date.now() - new Date(user.created_at).getTime()) /
          (1000 * 60 * 60 * 24)
      );

      const rowData = {
        employee_id: user.employee_id,
        name: user.name,
        email: user.email,
        role: user.role,
        department: user.department || 'Unassigned',
        position: user.position || 'Unassigned',
        account_status: accountStatus,
        failed_attempts: user.failed_attempts,
        locked_until: user.locked_until
          ? new Date(user.locked_until).toLocaleString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
            })
          : 'Not Locked',
        password_status: passwordStatus,
        temp_password: user.temp_password ? 'Yes - Requires Change' : 'No',
        is_twofa_enabled: user.is_twofa_enabled ? 'Enabled' : 'Disabled',
        password_last_change: user.password_last_change
          ? new Date(user.password_last_change).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
            })
          : 'Never Changed',
        created_at: new Date(user.created_at).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
        }),
        days_since_creation: daysSinceCreation,
      };

      const row = sheet.addRow(rowData);

      // Alternate row colors
      if (index % 2 === 1) {
        row.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFF9FAFB' },
        };
      }

      // Conditional formatting for account status
      const statusCell = row.getCell('account_status');
      if (accountStatus === 'LOCKED') {
        statusCell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFFECACA' }, // light red
        };
        statusCell.font = { color: { argb: 'FFDC2626' }, bold: true }; // dark red
      } else if (accountStatus === 'AT RISK') {
        statusCell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFFED7AA' }, // light orange
        };
        statusCell.font = { color: { argb: 'FFEA580C' }, bold: true }; // dark orange
      } else if (accountStatus === 'TEMP PASSWORD') {
        statusCell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFFEF3C7' }, // light yellow
        };
        statusCell.font = { color: { argb: 'FFCA8A04' }, bold: true }; // amber
      } else if (accountStatus === 'PASSWORD EXPIRED') {
        statusCell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFEDE9FE' }, // light purple
        };
        statusCell.font = { color: { argb: 'FF7E22CE' }, bold: true }; // deep violet
      } else if (accountStatus === 'READ-ONLY') {
        statusCell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFD2E0FA' }, // light blue
        };
        statusCell.font = { color: { argb: 'FF1D4ED8' }, bold: true }; // strong blue
      } else if (accountStatus === 'DEACTIVATED') {
        statusCell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFF3F4F6' }, // light gray
        };
        statusCell.font = { color: { argb: 'FF6B7280' }, bold: true }; // medium gray
      } else {
        // ACTIVE
        statusCell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFD1FAE5' }, // light green
        };
        statusCell.font = { color: { argb: 'FF166534' }, bold: true }; // deep green
      }

      // Highlight 2FA disabled
      const twofaCell = row.getCell('is_twofa_enabled');
      if (!user.is_twofa_enabled) {
        twofaCell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFFEF3C7' },
        };
        twofaCell.font = { color: { argb: 'FFCA8A04' } };
      }

      // Highlight high failed attempts
      const failedCell = row.getCell('failed_attempts');
      if (user.failed_attempts >= 3) {
        failedCell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFFECACA' },
        };
        failedCell.font = { color: { argb: 'FFDC2626' }, bold: true };
      }
    });

    // Add borders to all cells
    sheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
      row.eachCell(cell => {
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' },
        };
      });
    });

    // ========== CRITICAL ALERTS SHEET ==========
    const alertsSheet = workbook.addWorksheet('Critical Alerts');
    const criticalAlerts = generateSecurityAlerts(users);

    alertsSheet.addRow(['CRITICAL SECURITY ALERTS']);
    alertsSheet.addRow(['']);

    if (criticalAlerts.length > 0) {
      alertsSheet.addRow([
        'Alert #',
        'Priority',
        'Description',
        'Affected Users',
      ]);

      criticalAlerts.forEach((alert, index) => {
        const row = alertsSheet.addRow([
          index + 1,
          alert.type,
          alert.message,
          alert.affectedUsers,
        ]);

        // Color code by priority
        if (alert.type === 'HIGH PRIORITY') {
          row.getCell(2).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FFFECACA' },
          };
          row.getCell(2).font = { color: { argb: 'FFDC2626' }, bold: true };
        } else if (alert.type === 'MEDIUM PRIORITY') {
          row.getCell(2).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FFFED7AA' },
          };
          row.getCell(2).font = { color: { argb: 'FFEA580C' }, bold: true };
        } else {
          row.getCell(2).fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FFFEF3C7' },
          };
          row.getCell(2).font = { color: { argb: 'FFCA8A04' }, bold: true };
        }
      });

      // Style header
      const alertHeaderRow = alertsSheet.getRow(3);
      alertHeaderRow.font = { bold: true, color: { argb: 'FFFFFFFF' } };
      alertHeaderRow.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FF1f2937' },
      };
    } else {
      alertsSheet.addRow(['✅ No critical security alerts detected']);
      alertsSheet.getRow(3).font = {
        color: { argb: 'FF16A34A' },
        bold: true,
        size: 12,
      };
    }

    alertsSheet.getRow(1).font = { bold: true, size: 14 };
    alertsSheet.columns = [
      { width: 10 },
      { width: 18 },
      { width: 50 },
      { width: 15 },
    ];

    // ========== PROTECT SHEETS (Banking-grade security) ==========
    await cover.protect(SHEET_PASSWORD, {
      selectLockedCells: true,
      selectUnlockedCells: true,
    });

    await securitySheet.protect(SHEET_PASSWORD, {
      selectLockedCells: true,
      selectUnlockedCells: true,
    });

    await sheet.protect(SHEET_PASSWORD, {
      selectLockedCells: true,
      selectUnlockedCells: true,
    });

    await alertsSheet.protect(SHEET_PASSWORD, {
      selectLockedCells: true,
      selectUnlockedCells: true,
    });

    // ========== GENERATE FILENAME ==========
    const timestamp = new Date().toISOString().split('T')[0].replace(/-/g, '');
    const timeHHMM = new Date().toTimeString().slice(0, 5).replace(':', '');
    const filename = `UserAudit_Report_${timestamp}_${timeHHMM}_CONFIDENTIAL.xlsx`;

    // ========== SEND RESPONSE ==========
    res.setHeader(
      'Content-Type',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    );
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');

    await workbook.xlsx.write(res);
    res.end();
  } catch (err) {
    console.error('❌ User audit Excel export error:', err);
    res.status(500).json({
      error: 'Failed to export user audit report',
      message: err instanceof Error ? err.message : 'Unknown error occurred',
    });
  }
}

/**
 * GET /admin/users/export/csv
 * Exports a comprehensive user audit report for system administrators
 */
export async function exportUsersCSVController(req: Request, res: Response) {
  try {
    const { startDate, endDate } = req.query as {
      startDate?: string;
      endDate?: string;
    };

    // Fetch users based on filters
    const users = await getAllUsers({
      startDate,
      endDate,
    });

    if (users.length === 0) {
      return res.status(404).json({
        error: 'No users found for the specified criteria',
      });
    }

    // Create professional CSV structure with metadata header
    const csvData = [];

    // ========== REPORT METADATA SECTION ==========
    csvData.push(['SYSTEM USER AUDIT REPORT']);
    csvData.push(['System', 'FundXpert']);
    csvData.push([
      'Security Classification',
      'CONFIDENTIAL - SYSTEM ADMINISTRATOR ACCESS ONLY',
    ]);
    csvData.push([
      'Report Generated',
      new Date().toLocaleString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        timeZoneName: 'short',
      }),
    ]);
    csvData.push(['Report Type', 'Comprehensive User Audit']);
    csvData.push(['']); // Empty row for spacing

    // ========== REPORT SCOPE & FILTERS ==========
    csvData.push(['REPORT SCOPE & APPLIED FILTERS']);
    csvData.push(['Total Users Included', users.length.toString()]);

    // Date range
    if (startDate && endDate) {
      csvData.push([
        'Registration Period',
        `${new Date(startDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })} - ${new Date(endDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}`,
      ]);
    } else if (startDate) {
      csvData.push([
        'Registration Period',
        `From ${new Date(startDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}`,
      ]);
    } else if (endDate) {
      csvData.push([
        'Registration Period',
        `Until ${new Date(endDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}`,
      ]);
    } else {
      csvData.push(['Registration Period', 'All Time']);
    }

    csvData.push(['']); // Empty row for spacing

    // ========== SECURITY OVERVIEW STATISTICS ==========
    const securityStats = {
      totalUsers: users.length,
      lockedAccounts: users.filter(u => u.locked_until).length,
      tempPasswordUsers: users.filter(u => u.temp_password).length,
      expiredPasswords: users.filter(u => u.password_expired).length,
      twofaEnabled: users.filter(u => u.is_twofa_enabled).length,
      highFailedAttempts: users.filter(u => u.failed_attempts >= 3).length,
      roleBreakdown: {
        admin: users.filter(u => u.role === 'Admin').length,
        hr: users.filter(u => u.role === 'HR').length,
        employee: users.filter(u => u.role === 'Employee').length,
      },
    };

    csvData.push(['SECURITY OVERVIEW']);
    csvData.push(['Total User Accounts', securityStats.totalUsers.toString()]);
    csvData.push(['Locked Accounts', securityStats.lockedAccounts.toString()]);
    csvData.push([
      'Temporary Password Users',
      securityStats.tempPasswordUsers.toString(),
    ]);
    csvData.push([
      'Expired Passwords',
      securityStats.expiredPasswords.toString(),
    ]);
    csvData.push(['2FA Enabled Users', securityStats.twofaEnabled.toString()]);
    csvData.push([
      'High Failed Attempts (≥3)',
      securityStats.highFailedAttempts.toString(),
    ]);
    csvData.push(['']); // Empty row

    csvData.push(['ROLE DISTRIBUTION']);
    csvData.push([
      'Administrators',
      securityStats.roleBreakdown.admin.toString(),
    ]);
    csvData.push(['HR Personnel', securityStats.roleBreakdown.hr.toString()]);
    csvData.push([
      'Employees',
      securityStats.roleBreakdown.employee.toString(),
    ]);
    csvData.push(['']); // Empty row

    // ========== SECURITY RISK ASSESSMENT ==========

    // ========== DETAILED USER DATA TABLE ==========
    csvData.push(['DETAILED USER AUDIT DATA']);
    csvData.push([
      'Employee ID',
      'Full Name',
      'Email Address',
      'Role',
      'Department',
      'Position',
      'Account Status',
      'Failed Login Attempts',
      'Locked Until',
      'Password Status',
      'Temp Password',
      '2FA Enabled',
      'Last Password Change',
      'Account Created',
      'Days Since Creation',
    ]);

    // Format user rows with comprehensive security information
    users.forEach(user => {
      const accountStatus = getAccountStatus(user);
      const passwordStatus = getPasswordStatus(user);
      const daysSinceCreation = Math.floor(
        (Date.now() - new Date(user.created_at).getTime()) /
          (1000 * 60 * 60 * 24)
      );

      const rowData = [
        user.employee_id,
        user.name,
        user.email,
        user.role,
        user.department || 'Unassigned',
        user.position || 'Unassigned',
        accountStatus,
        user.failed_attempts.toString(),
        user.locked_until
          ? new Date(user.locked_until).toLocaleString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
            })
          : 'Not Locked',
        passwordStatus,
        user.temp_password ? 'Yes - Requires Change' : 'No',
        user.is_twofa_enabled ? 'Enabled' : 'Disabled',
        user.password_last_change
          ? new Date(user.password_last_change).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'short',
              day: 'numeric',
            })
          : 'Never Changed',
        new Date(user.created_at).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
        }),
        daysSinceCreation.toString(),
      ];
      csvData.push(rowData);
    });

    csvData.push(['']); // Empty row

    // ========== COMPLIANCE & AUDIT SUMMARY ==========
    csvData.push(['COMPLIANCE & AUDIT SUMMARY']);

    const complianceMetrics = {
      twofaCompliance: (
        (securityStats.twofaEnabled / securityStats.totalUsers) *
        100
      ).toFixed(1),
      noTempPassword: (
        ((securityStats.totalUsers - securityStats.tempPasswordUsers) /
          securityStats.totalUsers) *
        100
      ).toFixed(1),
      activeAccounts: (
        ((securityStats.totalUsers - securityStats.lockedAccounts) /
          securityStats.totalUsers) *
        100
      ).toFixed(1),
    };

    csvData.push([
      '2FA Adoption Rate',
      `${complianceMetrics.twofaCompliance}%`,
    ]);
    csvData.push([
      'Permanent Password Rate',
      `${complianceMetrics.noTempPassword}%`,
    ]);
    csvData.push([
      'Active Account Rate',
      `${complianceMetrics.activeAccounts}%`,
    ]);
    csvData.push(['']); // Empty row

    // ========== CRITICAL SECURITY ALERTS ==========
    const criticalAlerts = generateSecurityAlerts(users);

    if (criticalAlerts.length > 0) {
      csvData.push(['CRITICAL SECURITY ALERTS']);
      criticalAlerts.forEach((alert, index) => {
        csvData.push([
          `Alert ${index + 1}`,
          alert.type,
          alert.message,
          alert.affectedUsers.toString(),
        ]);
      });
      csvData.push(['']); // Empty row
    }

    // ========== AUDIT TRAIL INFORMATION ==========
    csvData.push(['AUDIT TRAIL INFORMATION']);
    csvData.push(['Report ID', generateReportId()]);
    csvData.push([
      'Document Classification',
      'CONFIDENTIAL - RESTRICTED ACCESS',
    ]);
    csvData.push(['Export Timestamp (UTC)', new Date().toISOString()]);
    csvData.push([
      'Export Timestamp (Local)',
      new Date().toLocaleString('en-US', {
        dateStyle: 'full',
        timeStyle: 'long',
      }),
    ]);
    csvData.push(['Exported By', req.user?.name || 'System Administrator']);
    csvData.push(['Export User ID', req.user?.id || 'SYS-ADMIN']);
    csvData.push(['Compliance Framework', 'ISO 27001']);

    csvData.push(['']); // Empty row

    csvData.push(['LEGAL NOTICE']);
    csvData.push([
      'This report contains confidential user information and security data.',
    ]);
    csvData.push([
      '',
      'Unauthorized access, disclosure, or distribution is strictly prohibited.',
    ]);
    csvData.push([
      '',
      'All access to this document is logged and monitored for compliance purposes.',
    ]);

    // Convert to CSV format
    const parser = new Json2CsvParser({
      fields: undefined,
      header: false,
      quote: '"',
      delimiter: ',',
      eol: '\r\n',
    });

    const csv = parser.parse(csvData);

    // ========== GENERATE FILENAME ==========
    const timestamp = new Date().toISOString().split('T')[0].replace(/-/g, '');
    const timeHHMM = new Date().toTimeString().slice(0, 5).replace(':', '');
    const filename = `UserAudit_Report_${timestamp}_${timeHHMM}_CONFIDENTIAL.csv`;

    // ========== SET RESPONSE HEADERS ==========
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Frame-Options', 'DENY');

    // Add BOM for proper Excel UTF-8 handling
    res.send('\ufeff' + csv);
  } catch (err) {
    console.error('❌ User audit CSV export error:', err);
    res.status(500).json({
      error: 'Failed to export user audit report',
      message: err instanceof Error ? err.message : 'Unknown error occurred',
    });
  }
}

// ========== HELPER FUNCTIONS ==========

function getAccountStatus(user: User): string {
  // 1️. Employment-based restrictions first
  if (['Terminated', 'Resigned'].includes(user.employment_status)) {
    return 'DEACTIVATED';
  }

  if (user.employment_status === 'Retired') {
    return 'READ-ONLY';
  }

  // 2. System flags (take precedence for active users)
  if (user.locked_until) {
    return 'LOCKED';
  }

  if (user.password_expired) {
    return 'PASSWORD EXPIRED';
  }

  if (user.temp_password) {
    return 'TEMP PASSWORD';
  }

  if (user.failed_attempts >= 3) {
    return 'AT RISK';
  }

  // 3️. Default
  return 'ACTIVE';
}

function getPasswordStatus(user: User): string {
  if (user.password_expired) {
    return 'Expired - Requires Reset';
  }
  if (user.temp_password) {
    return 'Temporary - Must Change on Login';
  }
  if (!user.password_last_changed) {
    return 'Original - Never Changed';
  }

  const daysSinceChange = Math.floor(
    (Date.now() - new Date(user.password_last_changed).getTime()) /
      (1000 * 60 * 60 * 24)
  );

  if (daysSinceChange > 90) {
    return `Stale - ${daysSinceChange} days old`;
  }
  return `Current - ${daysSinceChange} days old`;
}

function generateSecurityAlerts(users: User[]): Array<{
  type: string;
  message: string;
  affectedUsers: number;
}> {
  const alerts = [];

  const adminsWithoutTwofa = users.filter(
    u => u.role === 'Admin' && !u.is_twofa_enabled
  );
  if (adminsWithoutTwofa.length > 0) {
    alerts.push({
      type: 'HIGH PRIORITY',
      message: 'Administrator accounts without 2FA enabled',
      affectedUsers: adminsWithoutTwofa.length,
    });
  }

  const longTermTempPasswords = users.filter(u => {
    if (!u.temp_password) return false;
    const daysSinceCreation = Math.floor(
      (Date.now() - new Date(u.created_at).getTime()) / (1000 * 60 * 60 * 24)
    );
    return daysSinceCreation > 7;
  });

  if (longTermTempPasswords.length > 0) {
    alerts.push({
      type: 'MEDIUM PRIORITY',
      message: 'Users with temporary passwords for more than 7 days',
      affectedUsers: longTermTempPasswords.length,
    });
  }

  const highFailedAttempts = users.filter(u => u.failed_attempts >= 5);
  if (highFailedAttempts.length > 0) {
    alerts.push({
      type: 'SECURITY CONCERN',
      message: 'Accounts with 5 or more failed login attempts',
      affectedUsers: highFailedAttempts.length,
    });
  }

  return alerts;
}

function generateReportId(): string {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substring(2, 8).toUpperCase();
  return `AUDIT-${timestamp}-${random}`;
}
