import { pool } from '../config/db.config';
import type { Request, Response } from 'express';

import { Parser as Json2CsvParser } from 'json2csv';
import PDFDocument from 'pdfkit';

import ExcelJS from 'exceljs';
import { logUserAction } from '../services/adminService';
import { SHEET_PASSWORD } from '../config/security.config';

interface EmployeeInfo {
  id: number;
  name: string;
  employee_id: string;
  email: string;
  department: string;
  position: string;
  employment_status: string;
  date_hired: string;
  salary: number;
}

interface EmployeeContribution {
  id: number;
  contribution_date: string;
  employee_amount: number;
  employer_amount: number;
  total_amount: number;
  notes: string | null;
  is_adjusted: boolean;
  created_at: string;
  created_by_name: string;
}

/**
 * Export employee's own contributions as CSV
 * Employee can only export their own data
 */
export async function exportEmpContributionsCSV(req: Request, res: Response) {
  try {
    // Verify employee is authenticated
    if (!req.user || req.user.role !== 'Employee') {
      return res.status(403).json({ error: 'Access denied' });
    }

    const userId = req.user.id;
    const { startDate, endDate } = req.query as {
      startDate?: string;
      endDate?: string;
    };

    // Fetch employee information
    const employeeRes = await pool.query(
      `SELECT 
        u.id, u.name, u.employee_id, u.email, 
        d.name as department, p.title as position,
        u.employment_status, u.date_hired, u.salary
       FROM users u
       LEFT JOIN departments d ON u.department_id = d.id
       LEFT JOIN positions p ON u.position_id = p.id
       WHERE u.id = $1`,
      [userId]
    );

    if (employeeRes.rows.length === 0) {
      return res.status(404).json({ error: 'Employee not found' });
    }

    const employee: EmployeeInfo = employeeRes.rows[0];

    // Fetch contributions with date filtering
    let contributionsQuery = `
      SELECT 
        c.id,
        c.contribution_date,
        c.employee_amount,
        c.employer_amount,
        (c.employee_amount + c.employer_amount) as total_amount,
        c.notes,
        c.is_adjusted,
        c.created_at,
        u.name as created_by_name
      FROM contributions c
      LEFT JOIN users u ON c.created_by = u.id
      WHERE c.user_id = $1
    `;
    const queryParams: any[] = [userId];

    if (startDate && endDate) {
      contributionsQuery += ` AND c.contribution_date BETWEEN $2 AND $3`;
      queryParams.push(startDate, endDate);
    }

    contributionsQuery += ` ORDER BY c.contribution_date DESC`;

    const contributionsRes = await pool.query(contributionsQuery, queryParams);
    const contributions: EmployeeContribution[] = contributionsRes.rows;

    if (contributions.length === 0) {
      return res.status(404).json({
        error: 'No contributions found for the specified period',
      });
    }

    // Create professional CSV structure
    const csvData = [];

    // ========== REPORT HEADER ==========
    csvData.push(['PROVIDENT FUND CONTRIBUTION STATEMENT']);
    csvData.push(['Generated by', 'FundXpert System']);
    csvData.push([
      'Statement Date',
      new Date().toLocaleString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        timeZoneName: 'short',
      }),
    ]);
    csvData.push(['']); // Empty row

    // ========== EMPLOYEE INFORMATION ==========
    csvData.push(['EMPLOYEE INFORMATION']);
    csvData.push(['Name', employee.name]);
    csvData.push(['Employee ID', employee.employee_id]);
    csvData.push(['Department', employee.department]);
    csvData.push(['Position', employee.position]);
    csvData.push(['Employment Status', employee.employment_status]);
    csvData.push([
      'Date Hired',
      new Date(employee.date_hired).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      }),
    ]);
    csvData.push(['']); // Empty row

    // ========== STATEMENT PERIOD ==========
    csvData.push(['STATEMENT PERIOD']);
    if (startDate && endDate) {
      csvData.push([
        'Period',
        `${new Date(startDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })} - ${new Date(endDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}`,
      ]);
    } else {
      csvData.push(['Period', 'All Time']);
    }
    csvData.push(['Total Records', contributions.length.toString()]);
    csvData.push(['']); // Empty row

    // ========== CONTRIBUTION DETAILS TABLE ==========
    csvData.push(['CONTRIBUTION DETAILS']);
    csvData.push([
      'Contribution Date',
      'Employee Share (₱)',
      'Employer Share (₱)',
      'Total Contribution (₱)',
      'Status',
      'Notes',
      'Recorded By',
      'Record Date',
    ]);

    // Add contribution rows
    contributions.forEach(c => {
      csvData.push([
        new Date(c.contribution_date).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
        }),
        Number(c.employee_amount).toFixed(2),
        Number(c.employer_amount).toFixed(2),
        Number(c.total_amount).toFixed(2),
        c.is_adjusted ? 'Adjusted' : 'Original',
        c.notes || '-',
        c.created_by_name || 'System',
        new Date(c.created_at).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
        }),
      ]);
    });

    // ========== SUMMARY SECTION ==========
    const totalEmployeeContribution = contributions.reduce(
      (sum, c) => sum + Number(c.employee_amount),
      0
    );
    const totalEmployerContribution = contributions.reduce(
      (sum, c) => sum + Number(c.employer_amount),
      0
    );
    const totalContribution = contributions.reduce(
      (sum, c) => sum + Number(c.total_amount),
      0
    );

    csvData.push(['']); // Empty row
    csvData.push(['SUMMARY']);
    csvData.push([
      'Total Employee Contributions',
      `₱${totalEmployeeContribution.toLocaleString('en-US', { minimumFractionDigits: 2 })}`,
    ]);
    csvData.push([
      'Total Employer Contributions',
      `₱${totalEmployerContribution.toLocaleString('en-US', { minimumFractionDigits: 2 })}`,
    ]);
    csvData.push([
      'Grand Total',
      `₱${totalContribution.toLocaleString('en-US', { minimumFractionDigits: 2 })}`,
    ]);
    csvData.push([
      'Average Monthly Contribution',
      `₱${(totalContribution / contributions.length).toLocaleString('en-US', { minimumFractionDigits: 2 })}`,
    ]);
    csvData.push(['Number of Contributions', contributions.length.toString()]);

    // Active vs Adjusted breakdown
    const originalCount = contributions.filter(c => !c.is_adjusted).length;
    const adjustedCount = contributions.filter(c => c.is_adjusted).length;

    csvData.push(['']); // Empty row
    csvData.push(['RECORD STATUS']);
    csvData.push(['Original Records', originalCount.toString()]);
    csvData.push(['Adjusted Records', adjustedCount.toString()]);

    // ========== VESTING INFORMATION ==========
    const yearsOfService =
      (new Date().getTime() - new Date(employee.date_hired).getTime()) /
      (1000 * 60 * 60 * 24 * 365.25);

    csvData.push(['']); // Empty row
    csvData.push(['VESTING INFORMATION']);
    csvData.push(['Years of Service', yearsOfService.toFixed(2)]);
    csvData.push([
      'Employee Contributions Status',
      '100% Vested (Fully Owned)',
    ]);

    if (yearsOfService < 2) {
      csvData.push([
        'Employer Contributions Status',
        `Not Yet Vested (${yearsOfService.toFixed(1)} of 2 years completed)`,
      ]);
      csvData.push([
        'Estimated Vesting Date',
        new Date(
          new Date(employee.date_hired).setFullYear(
            new Date(employee.date_hired).getFullYear() + 2
          )
        ).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        }),
      ]);
    } else {
      csvData.push([
        'Employer Contributions Status',
        '100% Vested (2-year cliff met)',
      ]);
    }

    // ========== FOOTER INFORMATION ==========
    csvData.push(['']); // Empty row
    csvData.push(['DOCUMENT INFORMATION']);
    csvData.push(['Document Type', 'Personal Contribution Statement']);
    csvData.push(['Confidentiality', 'PRIVATE AND CONFIDENTIAL']);
    csvData.push(['Export Timestamp', new Date().toISOString()]);
    csvData.push([
      'System Source',
      'FundXpert Provident Fund Management System',
    ]);

    csvData.push(['']); // Empty row
    csvData.push(['IMPORTANT NOTICE']);
    csvData.push([
      'This statement is for your personal records and financial planning.',
    ]);
    csvData.push([
      'Please keep this document secure as it contains sensitive financial information.',
    ]);
    csvData.push([
      'For questions or discrepancies, please contact the HR Department.',
    ]);

    // Convert to CSV format
    const parser = new Json2CsvParser({
      fields: undefined,
      header: false,
      quote: '"',
      delimiter: ',',
      eol: '\r\n',
    });

    const csv = parser.parse(csvData);

    // ========== GENERATE FILENAME ==========
    const timestamp = new Date().toISOString().split('T')[0];
    const dateRange = startDate && endDate ? `_${startDate}_to_${endDate}` : '';
    const lastName = employee.name.split(' ').pop() || 'Employee';
    const filename = `PF_Contributions_${lastName}_${employee.employee_id}${dateRange}_${timestamp}.csv`;

    // ========== SET RESPONSE HEADERS ==========
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');

    // Log the action
    let reportPeriod = 'All Time';
    if (startDate && endDate) {
      reportPeriod = `${new Date(startDate).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`;
    }

    await logUserAction(
      req.user.id,
      'Exported Personal Contributions as CSV',
      'System',
      'Employee',
      {
        ipAddress: req.ip ?? '::1',
        details: {
          reportPeriod,
          recordCount: contributions.length,
        },
      }
    );

    // Add BOM for proper Excel UTF-8 handling
    res.send('\ufeff' + csv);
  } catch (err) {
    console.error('❌ Employee contribution CSV export error:', err);
    res.status(500).json({
      error: 'Failed to export contribution statement',
      message: err instanceof Error ? err.message : 'Unknown error occurred',
    });
  }
}

export async function exportEmpContributionsExcel(req: Request, res: Response) {
  try {
    // Verify employee is authenticated
    if (!req.user || req.user.role !== 'Employee') {
      return res.status(403).json({ error: 'Access denied' });
    }

    const userId = req.user.id;
    const { startDate, endDate } = req.query as {
      startDate?: string;
      endDate?: string;
    };

    // Fetch employee information
    const employeeRes = await pool.query(
      `SELECT 
        u.id, u.name, u.employee_id, u.email, 
        d.name as department, p.title as position,
        u.employment_status, u.date_hired, u.salary
       FROM users u
       LEFT JOIN departments d ON u.department_id = d.id
       LEFT JOIN positions p ON u.position_id = p.id
       WHERE u.id = $1`,
      [userId]
    );

    if (employeeRes.rows.length === 0) {
      return res.status(404).json({ error: 'Employee not found' });
    }

    const employee: EmployeeInfo = employeeRes.rows[0];

    // Fetch contributions with date filtering
    let contributionsQuery = `
      SELECT 
        c.id,
        c.contribution_date,
        c.employee_amount,
        c.employer_amount,
        c.notes,
        c.is_adjusted,
        c.created_at,
        u.name as created_by_name
      FROM contributions c
      LEFT JOIN users u ON c.created_by = u.id
      WHERE c.user_id = $1
    `;
    const queryParams: any[] = [userId];

    if (startDate && endDate) {
      contributionsQuery += ` AND c.contribution_date BETWEEN $2 AND $3`;
      queryParams.push(startDate, endDate);
    }

    contributionsQuery += ` ORDER BY c.contribution_date DESC`;

    const contributionsRes = await pool.query(contributionsQuery, queryParams);
    const contributions: EmployeeContribution[] = contributionsRes.rows;

    if (contributions.length === 0) {
      return res.status(404).json({
        error: 'No contributions found for the specified period',
      });
    }

    // ========== CREATE WORKBOOK ==========
    const workbook = new ExcelJS.Workbook();
    workbook.creator = 'FundXpert System';
    workbook.lastModifiedBy = employee.name;
    workbook.created = new Date();
    workbook.modified = new Date();
    if ('subject' in workbook.properties) {
      workbook.properties.subject = 'Personal Contribution Statement';
    }

    // ========== COVER SHEET ==========
    const cover = workbook.addWorksheet('Statement Information');

    cover.addRow(['PROVIDENT FUND CONTRIBUTION STATEMENT']);
    cover.addRow(['']);
    cover.addRow(['DOCUMENT CLASSIFICATION: PRIVATE AND CONFIDENTIAL']);
    cover.addRow(['']);
    cover.addRow(['STATEMENT GENERATION']);
    cover.addRow(['Generated By:', 'FundXpert System']);
    cover.addRow(['Statement Date:', new Date().toLocaleString()]);
    cover.addRow(['Document Type:', 'Personal Contribution Statement']);
    cover.addRow(['']);

    cover.addRow(['EMPLOYEE INFORMATION']);
    cover.addRow(['Full Name:', employee.name]);
    cover.addRow(['Employee ID:', employee.employee_id]);
    cover.addRow(['Email:', employee.email]);
    cover.addRow(['Department:', employee.department]);
    cover.addRow(['Position:', employee.position]);
    cover.addRow(['Employment Status:', employee.employment_status]);
    cover.addRow([
      'Date Hired:',
      new Date(employee.date_hired).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      }),
    ]);
    cover.addRow(['']);

    cover.addRow(['STATEMENT PERIOD']);
    if (startDate && endDate) {
      cover.addRow([
        'Date Range:',
        `${new Date(startDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })} - ${new Date(endDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}`,
      ]);
    } else {
      cover.addRow(['Date Range:', 'All Time']);
    }
    cover.addRow(['Total Records:', contributions.length]);
    cover.addRow(['']);

    // Calculate years of service for vesting info
    const yearsOfService =
      (new Date().getTime() - new Date(employee.date_hired).getTime()) /
      (1000 * 60 * 60 * 24 * 365.25);

    cover.addRow(['VESTING INFORMATION']);
    cover.addRow(['Years of Service:', yearsOfService.toFixed(2)]);
    cover.addRow(['Employee Contributions:', '100% Vested (Fully Owned)']);

    if (yearsOfService < 2) {
      cover.addRow([
        'Employer Contributions:',
        `Not Yet Vested (${yearsOfService.toFixed(1)} of 2 years completed)`,
      ]);
      const vestingDate = new Date(employee.date_hired);
      vestingDate.setFullYear(vestingDate.getFullYear() + 2);
      cover.addRow([
        'Estimated Vesting Date:',
        vestingDate.toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        }),
      ]);
    } else {
      cover.addRow([
        'Employer Contributions:',
        '100% Vested (2-year cliff met)',
      ]);
    }
    cover.addRow(['']);

    cover.addRow(['IMPORTANT NOTICE']);
    cover.addRow([
      '',
      'This statement is for your personal records and financial planning.',
    ]);
    cover.addRow([
      '',
      'Please keep this document secure as it contains sensitive financial information.',
    ]);
    cover.addRow([
      '',
      'For questions or discrepancies, please contact the HR Department.',
    ]);

    // Style cover sheet
    cover.getRow(1).font = {
      bold: true,
      size: 16,
      color: { argb: 'FF1f2937' },
    };
    cover.getRow(3).font = {
      bold: true,
      size: 11,
      color: { argb: 'FF7C3AED' },
    };
    cover.getRow(5).font = { bold: true, size: 11 };
    cover.getRow(10).font = { bold: true, size: 11 };
    cover.getRow(18).font = { bold: true, size: 11 };
    cover.getRow(24).font = { bold: true, size: 11 };
    cover.getRow(29).font = { bold: true, size: 11 };

    cover.columns = [{ width: 25 }, { width: 55 }];

    // ========== CONTRIBUTION DETAILS SHEET ==========
    const sheet = workbook.addWorksheet('Contribution Details');

    sheet.columns = [
      { header: 'ID', key: 'id', width: 10 },
      { header: 'Contribution Date', key: 'contribution_date', width: 18 },
      { header: 'Employee Share (₱)', key: 'employee_amount', width: 20 },
      { header: 'Employer Share (₱)', key: 'employer_amount', width: 20 },
      { header: 'Total Contribution (₱)', key: 'total', width: 22 },
      { header: 'Status', key: 'status', width: 15 },
      { header: 'Notes', key: 'notes', width: 40 },
      { header: 'Recorded By', key: 'recorded_by', width: 20 },
      { header: 'Record Date', key: 'record_date', width: 15 },
    ];

    // Freeze header row
    sheet.views = [{ state: 'frozen', ySplit: 1 }];

    // Style header row
    const headerRow = sheet.getRow(1);
    headerRow.font = { bold: true, color: { argb: 'FFFFFFFF' } };
    headerRow.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FF7C3AED' }, // Purple theme for employee
    };
    headerRow.alignment = { vertical: 'middle', horizontal: 'center' };
    headerRow.height = 25;

    // Add contribution data
    contributions.forEach((c, index) => {
      const employeeAmount = Number(c.employee_amount);
      const employerAmount = Number(c.employer_amount);
      const total = employeeAmount + employerAmount;

      const rowData = {
        id: c.id,
        contribution_date: new Date(c.contribution_date).toLocaleDateString(
          'en-US',
          {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
          }
        ),
        employee_amount: employeeAmount,
        employer_amount: employerAmount,
        total: total,
        status: c.is_adjusted ? 'Adjusted' : 'Original',
        notes: c.notes || '-',
        recorded_by: c.created_by_name || 'System',
        record_date: new Date(c.created_at).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
        }),
      };

      const row = sheet.addRow(rowData);

      // Alternate row colors
      if (index % 2 === 1) {
        row.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFF9FAFB' },
        };
      }

      // Center align certain columns
      row.getCell('id').alignment = { horizontal: 'center' };
      row.getCell('status').alignment = { horizontal: 'center' };
    });

    // Calculate totals
    const totalEmployee = contributions.reduce(
      (sum, c) => sum + Number(c.employee_amount),
      0
    );
    const totalEmployer = contributions.reduce(
      (sum, c) => sum + Number(c.employer_amount),
      0
    );
    const grandTotal = totalEmployee + totalEmployer;

    // Add empty row before totals
    sheet.addRow({});

    // Add totals row
    const totalRow = sheet.addRow({
      id: '',
      contribution_date: 'TOTAL',
      employee_amount: totalEmployee,
      employer_amount: totalEmployer,
      total: grandTotal,
      status: '',
      notes: '',
      recorded_by: '',
      record_date: '',
    });

    totalRow.font = { bold: true, size: 11 };
    totalRow.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFE9D5FF' }, // Light purple
    };
    totalRow.alignment = { horizontal: 'right' };

    // Format currency columns
    sheet.getColumn('employee_amount').numFmt = '"₱"#,##0.00';
    sheet.getColumn('employer_amount').numFmt = '"₱"#,##0.00';
    sheet.getColumn('total').numFmt = '"₱"#,##0.00';

    // Add borders to all cells
    sheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
      row.eachCell(cell => {
        cell.border = {
          top: { style: 'thin', color: { argb: 'FFD1D5DB' } },
          left: { style: 'thin', color: { argb: 'FFD1D5DB' } },
          bottom: { style: 'thin', color: { argb: 'FFD1D5DB' } },
          right: { style: 'thin', color: { argb: 'FFD1D5DB' } },
        };
      });
    });

    // ========== SUMMARY SHEET ==========
    const summarySheet = workbook.addWorksheet('Summary');

    summarySheet.addRow(['CONTRIBUTION SUMMARY']);
    summarySheet.addRow(['']);

    summarySheet.addRow(['Employee Name:', employee.name]);
    summarySheet.addRow(['Employee ID:', employee.employee_id]);
    summarySheet.addRow(['Department:', employee.department]);
    summarySheet.addRow(['']);

    summarySheet.addRow(['FINANCIAL OVERVIEW']);
    summarySheet.addRow(['Total Employee Contributions:', totalEmployee]);
    summarySheet.addRow(['Total Employer Contributions:', totalEmployer]);
    summarySheet.addRow(['Grand Total:', grandTotal]);
    summarySheet.addRow(['']);

    summarySheet.addRow(['STATISTICS']);
    summarySheet.addRow(['Number of Contributions:', contributions.length]);
    summarySheet.addRow([
      'Average Contribution:',
      grandTotal / contributions.length,
    ]);
    summarySheet.addRow([
      'Average Employee Share:',
      totalEmployee / contributions.length,
    ]);
    summarySheet.addRow([
      'Average Employer Share:',
      totalEmployer / contributions.length,
    ]);
    summarySheet.addRow(['']);

    // Record status breakdown
    const activeCount = contributions.filter(c => !c.is_adjusted).length;
    const adjustedCount = contributions.filter(c => c.is_adjusted).length;

    summarySheet.addRow(['RECORD STATUS']);
    summarySheet.addRow(['Active Records:', activeCount]);
    summarySheet.addRow(['Adjusted Records:', adjustedCount]);
    summarySheet.addRow(['Total Records:', contributions.length]);

    // Style summary sheet
    summarySheet.getRow(1).font = { bold: true, size: 14 };
    summarySheet.getRow(7).font = { bold: true, size: 12 };
    summarySheet.getRow(12).font = { bold: true, size: 12 };
    summarySheet.getRow(18).font = { bold: true, size: 12 };

    // Highlight grand total
    summarySheet.getRow(10).font = { bold: true, size: 11 };
    summarySheet.getRow(10).fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFE9D5FF' },
    };

    summarySheet.getRow(8).numFmt = '"₱"#,##0.00';
    summarySheet.getRow(9).numFmt = '"₱"#,##0.00';
    summarySheet.getRow(10).numFmt = '"₱"#,##0.00';
    summarySheet.getRow(13).numFmt = '"₱"#,##0.00';
    summarySheet.getRow(14).numFmt = '"₱"#,##0.00';
    summarySheet.getRow(15).numFmt = '"₱"#,##0.00';
    summarySheet.getRow(16).numFmt = '"₱"#,##0.00';
    summarySheet.columns = [{ width: 30 }, { width: 25 }];

    //  Protect sheets with password  set
    if (SHEET_PASSWORD) {
      await cover.protect(SHEET_PASSWORD, {
        selectLockedCells: true,
        selectUnlockedCells: true,
      });

      await sheet.protect(SHEET_PASSWORD, {
        selectLockedCells: true,
        selectUnlockedCells: true,
      });

      await summarySheet.protect(SHEET_PASSWORD, {
        selectLockedCells: true,
        selectUnlockedCells: true,
      });
    }

    // ========== GENERATE FILENAME ==========
    const timestamp = new Date().toISOString().split('T')[0];
    const dateRange = startDate && endDate ? `_${startDate}_to_${endDate}` : '';
    const lastName = employee.name.split(' ').pop() || 'Employee';
    const filename = `MyContributions_${lastName}_${employee.employee_id}${dateRange}_${timestamp}.xlsx`;

    // ========== SEND RESPONSE ==========
    res.setHeader(
      'Content-Type',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    );
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    res.setHeader('Pragma', 'no-cache');
    res.setHeader('Expires', '0');

    // Log the action
    let reportPeriod = 'All Time';
    if (startDate && endDate) {
      reportPeriod = `${new Date(startDate).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`;
    }

    await logUserAction(
      req.user.id,
      'Exported Personal Contributions as Excel',
      'System',
      'Employee',
      {
        ipAddress: req.ip ?? '::1',
        details: {
          reportPeriod,
          recordCount: contributions.length,
        },
      }
    );

    await workbook.xlsx.write(res);
    res.end();
  } catch (err) {
    console.error('❌ Employee contribution Excel export error:', err);
    res.status(500).json({
      error: 'Failed to export contribution statement',
      message: err instanceof Error ? err.message : 'Unknown error occurred',
    });
  }
}
